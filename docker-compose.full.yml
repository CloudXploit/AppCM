version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cm_diagnostics
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/cm_diagnostics
      REDIS_URL: redis://redis:6379
      JWT_SECRET: cm-diagnostics-dev-secret
      JWT_REFRESH_SECRET: cm-diagnostics-refresh-secret
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./packages/api:/app/packages/api
      - ./packages/core:/app/packages/core
      - ./packages/database:/app/packages/database
      - ./packages/logger:/app/packages/logger
      - ./packages/auth:/app/packages/auth
      - ./packages/cm-connector:/app/packages/cm-connector
      - ./packages/diagnostics:/app/packages/diagnostics
      - ./packages/idol-connector:/app/packages/idol-connector
      - ./packages/es-connector:/app/packages/es-connector
    command: npm run dev

  # Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_GRAPHQL_URL: http://localhost:4000/graphql
      NEXT_PUBLIC_WS_URL: ws://localhost:4000/graphql
    depends_on:
      - api
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages/ui:/app/packages/ui
      - ./packages/core:/app/packages/core
      - ./packages/api-client:/app/packages/api-client
    command: npm run dev

  # Adminer for database management
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

volumes:
  postgres_data: